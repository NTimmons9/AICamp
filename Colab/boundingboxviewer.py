# -*- coding: utf-8 -*-
"""Copy of BoundingBoxViewer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/134iVMmD68ZTyRntUZDgJun6xXSEqaET7
"""

!pip install bbox-visualizer
!pip install opencv-python

import bbox_visualizer as bbv
import numpy as np
import cv2
import matplotlib.pyplot as plt
from google.colab import files
import re
import scipy.io
from io import BytesIO

# Upload the image files
print("Select and upload all of the images in one folder")
uploaded_images = files.upload()

# Upload the .mat file
print("Upload the Bounding Box file from the same folder")
uploaded_mat = files.upload()

# Extract the image numbers from the image file names
image_numbers = [int(re.search(r'_(\d+)\.', filename).group(1)) for filename in uploaded_images.keys()]

# Generate a unique filename for the .mat file
mat_file_name = f"mat_file_{str(np.random.randint(10000))}.mat"

# Save the uploaded .mat file with the unique filename
with open(mat_file_name, 'wb') as f:
    f.write(uploaded_mat[next(iter(uploaded_mat))])

# Load the .mat file
mat_data = scipy.io.loadmat(mat_file_name)
coordinates = mat_data['bb']

# Process each uploaded image
for image_file_name, image_file_data in uploaded_images.items():
    # Convert the BytesIO object to a NumPy array
    nparr = np.frombuffer(image_file_data, np.uint8)

    # Read the image using cv2.imdecode
    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

    # Extract the image number from the image file name
    image_number = int(re.search(r'_(\d+)\.', image_file_name).group(1))

    # Get the coordinates for the current image number
    if image_number <= len(coordinates):
        x1, x2, y1, y2 = coordinates[image_number - 1][1:].astype(int)
        print(x1, x2, y1, y2)
    else:
        print(f"No coordinates found for image number {image_number}")
        x1, y1, x2, y2 = 0, 0, 0, 0

    # Draw the bounding box
    output_img = bbv.draw_rectangle(img, (x1, y1, x2, y2), bbox_color=(255, 0, 255), thickness=10)

    # Convert BGR image to RGB
    output_img_rgb = cv2.cvtColor(output_img, cv2.COLOR_BGR2RGB)

    # Display the image using matplotlib
    plt.imshow(output_img_rgb)
    plt.axis('off')
    plt.title(f"Image {image_number}")
    plt.show()

