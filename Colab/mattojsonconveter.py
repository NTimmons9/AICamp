# -*- coding: utf-8 -*-
"""MatToJsonConveter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jZjyFiwInjyr3b7BNUahUtuXWnYLoOp7

1. Find format of input for object detection
2. Find existing implementation of object detection
3. Find possible models we can use
"""

# You may see unexpected errors if multiple people run their code at the same time.
# Communicate with each other on the group to see if anyone else is using it and use different variable names so your code doesn't affect someone else's!

from google.colab import drive, files
import scipy.io as sio
import cv2
from google.colab.patches import cv2_imshow
import os

drive.mount('/content/drive')

#edit to your file path
folder_path = '/content/drive/MyDrive/Baggage_data/B0022'
# '/content/drive/MyDrive/Datasets/Baggage_data/B0001/B0001_0001.png'

import json
from google.colab import drive
from google.colab import files
from PIL import Image
import numpy as np
import scipy.io

# Initialize the annotation data structure
annotation_data = {
    "images": [],
    "annotations": [],
    "categories": []
}

print("Upload the Bounding Box file from the same")
uploaded_mat = files.upload()

# Generate a unique filename for the .mat file
mat_file_name = f"mat_file_{str(np.random.randint(10000))}.mat"

# Save the uploaded .mat file with the unique filename
with open(mat_file_name, 'wb') as f:
    f.write(uploaded_mat[next(iter(uploaded_mat))])

# Load the .mat file
mat_data = scipy.io.loadmat(mat_file_name)
coordinates = mat_data['bb']

# Get a sorted list of files in descending order
file_list = sorted(os.listdir(folder_path), reverse=False)

# Iterate through the sorted files
for filename in file_list:
    if filename.endswith(".png"):  # Adjust the file extensions as needed
        file_path = os.path.join(folder_path, filename)
        image_id = len(annotation_data["images"]) + 1

        # Get image dimensions using Pillow
        with Image.open(file_path) as img:
            width, height = img.size

        annotation_data["images"].append({
            "id": image_id,
            "file_name": filename,
            "width": width,
            "height": height
        })

        for bbox in coordinates[coordinates[:, 0] == image_id, 1:]:
            x1, x2, y1, y2 = bbox.astype(int)

        annotation_data["annotations"].append({
            "id": image_id,
            "image_id": image_id,
            "category_id": image_id,
            "area": int((x2 - x1) * (y2 - y1)),
            "bbox": [int(x1), int(y1), int((x2 - x1)), int((y2 - y1))],
            "iscrowd": 0
        })

        annotation_data["categories"].append({
            "id": image_id,
            "name": "gun"
        })

# Save the annotation data to a JSON file
with open("/content/annotations.json", "w") as json_file:  # Update with desired output path
    json.dump(annotation_data, json_file)

print(annotation_data["images"],'\n',annotation_data["annotations"], "\n", annotation_data["categories"])
